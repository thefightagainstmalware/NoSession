#include <jni.h>
#include <windows.h>
#include "sandbox/win/src/sandbox.h"
#include "sandbox/win/src/sandbox_factory.h"

bool isMcSessionID(LPWSTR arg) {
    size_t len = wcslen(arg);

}

bool runParent(JNIEnv *env, sandbox::BrokerServices *broker_service, jobjectArray rwMounts, jobjectArray roMounts) {
    if (0 != broker_service->Init()) {
        return false;
    }

    PROCESS_INFORMATION pi;

    std::unique_ptr<sandbox::TargetPolicy> policy = broker_service->CreatePolicy();
    sandbox::TargetConfig *config = policy->GetConfig();

    // Here's where you set the security level of the sandbox. Doing a "goto definition" on any
    // of these symbols usually gives you a good description of their usage and alternatives.
    config->SetJobLevel(sandbox::JobLevel::kLockdown, 0);
    config->SetTokenLevel(sandbox::USER_RESTRICTED_SAME_ACCESS, sandbox::USER_LOCKDOWN);
    config->SetDesktop(sandbox::Desktop::kAlternateDesktop);
    config->SetDelayedIntegrityLevel(sandbox::INTEGRITY_LEVEL_LOW);

    //Add additional rules here
    for (jsize i = 0; i < env->GetArrayLength(rwMounts); i++) {
        auto str = (jstring) env->GetObjectArrayElement(rwMounts, i);
        const jchar *chars = env->GetStringChars(str, nullptr);
        config->AddRule(sandbox::SubSystem::kFiles, sandbox::Semantics::kFilesAllowAny,
                        reinterpret_cast<const wchar_t *>(chars));
        env->ReleaseStringChars(str, chars);
    }
    for (jsize i = 0; i < env->GetArrayLength(roMounts); i++) {
        auto str = (jstring) env->GetObjectArrayElement(roMounts, i);
        const jchar *chars = env->GetStringChars(str, nullptr);
        config->AddRule(sandbox::SubSystem::kFiles, sandbox::Semantics::kFilesAllowReadonly,
                        reinterpret_cast<const wchar_t *>(chars));
        env->ReleaseStringChars(str, chars);
    }
    int count = 0;
    LPWSTR* commandLineArgs = CommandLineToArgvW(GetCommandLineW(), &count);
    wchar_t str[] = L"<noSessionAccessToken>";
    for (int i = 0; i < count; i++) {
        if (isMcSessionID(commandLineArgs[i])) {
            commandLineArgs[i] = str;
        }
    }
    broker_service->SpawnTarget(commandLineArgs[0], GetCommandLineW(), std::move(policy), nullptr, &pi);

    // Just like CreateProcess, you need to close these yourself unless you need to reference them later
    CloseHandle(pi.hThread);
    CloseHandle(pi.hProcess);
    return true;
}

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     gq_malwarefight_nosession_win_WindowsSandbox
 * Method:    initSandbox
 * Signature: ([Ljava/lang/String;[Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_gq_malwarefight_nosession_win_WindowsSandbox_initSandbox
        (JNIEnv *env, jclass cls, jobjectArray rwMounts, jobjectArray roMounts) {
    sandbox::BrokerServices *broker_service = sandbox::SandboxFactory::GetBrokerServices();
    if (broker_service != nullptr) {
        // parent
        return runParent(env, broker_service, rwMounts, roMounts);
    } else {
        // child
    }
}

#ifdef __cplusplus
}
#endif
