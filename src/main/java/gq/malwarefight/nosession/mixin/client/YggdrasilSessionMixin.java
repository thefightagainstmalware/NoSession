package gq.malwarefight.nosession.mixin.client;

import com.mojang.authlib.GameProfile;
import com.mojang.authlib.exceptions.AuthenticationException;
import com.mojang.authlib.yggdrasil.YggdrasilMinecraftSessionService;
import gq.malwarefight.nosession.utils.Utils;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.io.IOException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Objects;


@Mixin(YggdrasilMinecraftSessionService.class)
public class YggdrasilSessionMixin {
    @Inject(method = "joinServer", at = @At("HEAD"), cancellable = true, remap = false)
    public void joinServer(GameProfile profile, String authenticationToken, String serverId, CallbackInfo ci) throws AuthenticationException {
        try {
            if (authenticationToken.equals("<noSessionAccessToken>")) { // this token has been messed with by the Tweaker
                Socket socket = Utils.getProperSocket(profile.getId());
                try {
                    if (socket == null) {
                        throw new NullPointerException("Socket is null!");
                    }
                    socket.getOutputStream().write(("login " + serverId + "\n").getBytes(StandardCharsets.UTF_8));
                    socket.getOutputStream().flush();
                    String line = Utils.readString(socket.getInputStream(), '\n');
                    String[] parts = line.split(" ");
                    if (Objects.equals(parts[0], "200")) {
                        ci.cancel();
                    } else if (Objects.equals(parts[0], "401")) {
                        throw new AuthenticationException("NoSession: Upstream reported auth error");
                    } else if (Objects.equals(parts[0], "500")) {
                        throw new AuthenticationException("NoSession: Upstream reported failure");
                    } else {
                        throw new AuthenticationException("NoSession: Upstream error or incompatible version");
                    }
                } catch (Exception e) {
                    throw new AuthenticationException("NoSession (block 1): " + e.getClass().getName() + ": " + e.getMessage());
                }

                try {
                    socket.getOutputStream().write("disconnect\n".getBytes(StandardCharsets.UTF_8));
                    socket.close();
                } catch (Exception ignored) {
                    // it doesn't matter if the socket is disconnected
                    // if there's an IOException, the socket is either closed or
                    // impossible to close/unusable
                }
            }
        } catch (Exception e) {
            if (e instanceof AuthenticationException)
                throw e;
            e.printStackTrace();
            throw new AuthenticationException("NoSession (block 2): " + e.getMessage());
        }
    }
}