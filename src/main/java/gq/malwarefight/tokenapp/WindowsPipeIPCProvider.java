package gq.malwarefight.tokenapp;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.nio.file.*;
import java.nio.file.attribute.UserPrincipal;

public class WindowsPipeIPCProvider implements IPCProvider {
    WatchService watchService = FileSystems.getDefault().newWatchService();
    public WindowsPipeIPCProvider() throws IOException {
        Path path = Paths.get("\\\\.\\pipe");
        path.register(watchService, StandardWatchEventKinds.ENTRY_CREATE);
    }

    @Override
    public SimpleSocket accept() throws IOException {
        WatchKey key;
        while (true) {
            try {
                key = watchService.take();
            } catch (InterruptedException e) {
                throw new IOException(e);
            }
            for (WatchEvent<?> event : key.pollEvents()) {
                if (event.context() instanceof Path) {
                    Path newPath = (Path) event.context();
                    newPath = Paths.get("\\\\.\\pipe").resolve(newPath);
                    if (newPath.toString().contains("nosession-ipc-" + Main.gameProfile.getId().toString())) {
                        Path finalNewPath = newPath;
                        return new SimpleSocket() {
                            RandomAccessFile pipe = new RandomAccessFile(finalNewPath.toFile(), "rw");

                            @Override
                            public InputStream getInputStream() {
                                return new InputStream() {
                                    @Override
                                    public int read() throws IOException {
                                        return pipe.read();
                                    }
                                };
                            }

                            @Override
                            public OutputStream getOutputStream() {
                                return new OutputStream() {
                                    @Override
                                    public void write(int b) throws IOException {
                                        pipe.write(b);
                                    }
                                };
                            }

                            @Override
                            public void close() throws IOException {
                                pipe.close();
                            }
                        };
                    }
                }
            }
            key.reset();
        }
    }
}
