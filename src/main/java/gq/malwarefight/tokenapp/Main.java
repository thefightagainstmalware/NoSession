package gq.malwarefight.tokenapp;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mojang.authlib.GameProfile;
import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
import com.mojang.authlib.yggdrasil.YggdrasilMinecraftSessionService;
import gq.malwarefight.nosession.utils.Utils;
import net.minecraft.launchwrapper.Launch;
import org.apache.commons.lang3.SystemUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;

import javax.net.ssl.HttpsURLConnection;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.net.*;
import java.security.Permission;
import java.util.UUID;

public class Main {

    public static final int BASE_PORT = 47777;
    public static YggdrasilMinecraftSessionService sessionService = null;
    public static YggdrasilAuthenticationService authenticationService = null;
    public static GameProfile gameProfile = null;

    public static void setup() throws IOException {
        String token = Utils.readString(System.in, '\n');
        YggdrasilAuthenticationService yas = new YggdrasilAuthenticationService(Proxy.NO_PROXY,
            token);
        authenticationService = yas;
        sessionService = (YggdrasilMinecraftSessionService) yas.createMinecraftSessionService();
        HttpsURLConnection httpsURLConnection = (HttpsURLConnection) (new URL(
            "https://api.minecraftservices.com/minecraft/profile").openConnection());
        httpsURLConnection.setRequestProperty("Authorization", "Bearer " + token);
        String response = Utils.readString(httpsURLConnection.getInputStream(), null);
        JsonObject jsonObject = new JsonParser().parse(response).getAsJsonObject();
        UUID id = UUID.fromString(
            Utils.normalizeUUID(jsonObject.get("id").getAsString())
        );
        String name = jsonObject.get("name").getAsString();
        gameProfile = new GameProfile(id, name);
        System.setProperty("java.net.preferIPv4Stack", "true");
    }

    public static void main(String[] args) throws FileNotFoundException {
        PrintStream stream = new PrintStream(args[0]);
        System.setOut(stream);
        System.setErr(stream);

        System.setSecurityManager(new SecurityManager() {
            @Override
            public void checkPermission(Permission perm) {}

            @Override
            public void checkPermission(Permission perm, Object context) {}

            @Override
            public void checkExit(int status) {
                System.err.println(ExceptionUtils.getStackTrace(new Throwable()));
            }
        });

        try {
            setup();
        } catch (Exception e) {
            System.err.println("Could not setup the server\n" + ExceptionUtils.getStackTrace(e));
            System.exit(1);
        }
        ServerSocket sock = null;
        for (int i = BASE_PORT; i < BASE_PORT + 10; i++) {
            try {
                if (SystemUtils.IS_OS_WINDOWS) {
                    sock = new ServerSocket(i, 50, new InetSocketAddress(i).getAddress());
                } else {
                    sock = new ServerSocket(i, 50, InetAddress.getLoopbackAddress());
                }
                break;
            } catch (Exception ignored) {
              // we couldn't bind to the port, try the next one
            }
        }
        if (sock == null) {
            System.err.println("Could not bind to any valid port");
            System.exit(1);
        }
        while (true) {
            try {
                Socket connection = sock.accept();
                if (!((InetSocketAddress) connection.getRemoteSocketAddress()).getAddress().isLoopbackAddress()) {
                    try {
                        connection.close();
                    } catch (IOException exception) {
                        continue;
                    }
                }
                Thread t = new SocketThread(connection);
                t.start();
            } catch (IOException exception) {
                exception.printStackTrace();
                System.err.println("Exiting...");
                System.exit(0);
            }
        }
    }
}
  
